---
meta:
  name:    yasak
  release: (( concat meta.name " CLI" ))
  target:  (( grab meta.team ))
  url:     https://ci.gstack.io
  team:    gk-plat-devs

  initial_version: 1.0.0

  go:
    binary: yasak
    cmd_module: .

  git:
    email:  ((git-commit-email))
    name:   ((git-commit-name))

  image:
    name: (( concat meta.private-registry.host "/gstack/gk-ops" ))
    tag:  latest
    registry:
      username: (( grab meta.private-registry.username ))
      password: (( grab meta.private-registry.password ))

  private-registry:
    host:       harbor.ci.gstack.io
    username:   ((private-registry-username))
    password:   ((private-registry-password))

  aws:
    bucket:      (( grab meta.pipeline ))
    region_name: eu-west-3
    access_key:  ((aws-access-key))
    secret_key:  ((aws-secret-key))

  github:
    owner:  gstackio
    repo:   yasak
    private_key:  ((github-private-key))
    access_token: ((github-access-token))

  slack:
    webhook:       ((slack-webhook))
    username:      ((slack-username))
    icon:          ((slack-icon-url))
    channel:       "#oss-pipelines-notifications"

  credhub:
    client: concourse-gk-plat-devs-to-credhub


groups:
  - name: bump
    jobs:
      - bump-deps
  - name: setup
    jobs:
      - set-github-webhooks
      - delete-github-webhooks

jobs:
  - name: set-github-webhooks
    serial: true
    serial_groups: [ github-webhooks ]
    plan:
      - get: concourse-webhook-token
        trigger: true
      - put: create-repo-webhook
        resource: github-webhook
        params:
          operation:     create
          resource_name: git
          events:        [ push ]
          <<: &github_webhook_resource_params
            org:           (( grab meta.github.owner ))
            repo:          (( grab meta.github.repo ))
            webhook_token: ((concourse-webhook-token))
      - put: create-pr-webhook
        resource: github-webhook
        params:
          operation:     create
          resource_name: git-pull-requests
          events:        [ push, pull_request ]
          <<: *github_webhook_resource_params

  - name: delete-github-webhooks
    serial: true
    serial_groups: [ github-webhooks ]
    plan:
      - put: delete-repo-webhook
        resource: github-webhook
        params:
          operation:     delete
          resource_name: git
          events:        [ push ]
          <<: *github_webhook_resource_params
      - put: delete-pr-webhook
        resource: github-webhook
        params:
          operation:     delete
          resource_name: git-pull-requests
          events:        [ push, pull_request ]
          <<: *github_webhook_resource_params

  - name: test
    plan:
      - in_parallel:
          - (( merge on get ))
          - get: golang-alpine
            trigger: true
            passed: [ bump-deps ]

      # NOTICE: we replace all further steps
      - # task: test
        (( prune ))

      - &compile_task
        task: compile
        image: golang-alpine
        config:
          platform: linux
          inputs:
            - name: git
          outputs:
            - name: compiled-binary
          run:
            dir: git
            path: go
            args:
              - build
              - -o
              - ../compiled-binary/yasak

      - &smpoke_test_task
        task: smoke-test
        image: image
        config:
          platform: linux
          inputs:
            - name: compiled-binary
            - name: git
          run:
            path: sh
            args:
              - -exc
              - |
                export PATH=${PWD}/compiled-binary:${PATH}

                yasak locate --path "/bim/bam" git/test/fixture1.yml > result1
                diff -u git/test/expected1 result1

                git/example-edit-value.sh "git/test/fixture2.yml" "/bim/bam/toto" "plop" > result2.yml
                diff -u result2.yml git/test/expected2.yml

  - name: test-pr
    plan:
      - (( inline ))
      - in_parallel:
          - (( merge on get ))
          - get: golang-alpine
            trigger: true
            passed: [ bump-deps ]

      - {} # put: git-pull-requests

      # We replace the 'task: text' by a block of 2 tasks
      - task:   (( prune ))
        image:  (( prune ))
        config: (( prune ))
        do:
          - *compile_task

          - *smpoke_test_task

  - name: shipit
    plan:
      - (( inline ))
      - in_parallel:
          - (( merge on get ))
          - { get: image, resource: golang-alpine, passed: [ test ] }
      - task: release
        config:
          run:
            path: sh
            args:
              - -ec
              - |
                apk --no-progress add  bash  git  gcc  musl-dev
                export PATH=${PWD}/gopath/bin:${PATH}
                bash "${SHIPIT_SCRIPT}"
          params:
            SHIPIT_SCRIPT: (( concat "./gopath/src/" meta.go.module "/ci/scripts/shipit" ))

  - name: bump-deps
    public: true
    serial: true
    plan:
      - in_parallel:
          - { get: weekly, trigger: true }
          - { get: git }
          - { get: gk-automation }
          - { get: golang-alpine }
          - { get: image }

      - task: bump-golang-deps
        image: golang-alpine
        config:
          platform: linux
          inputs:  [ { name: git, path: repo } ]
          outputs:
            - name: repo-bumped
            - name: golang-info
          run:
            path: sh
            args:
            - -ec
            - |
              find "repo" -mindepth 1 -maxdepth 1 -print0 \
                  | xargs -0 -I{} cp -a {} "repo-bumped"
              cd "repo-bumped" || exit 115

              awk '/^go /{print $2}' go.mod > ../golang-info/previous-version
              (
                  set -x
                  go_version=$(
                      go version \
                      | awk '{sub(/go/,"",$3); sub(/\.[[:digit:]]+$/,"",$3); print $3}'
                  )
                  sed -i -Ee "s/^go [[:digit:].]+\$/go ${go_version}/" go.mod
                  go get -t -u ./...
                  go mod tidy

                  echo "${go_version}" > ../golang-info/version
              )

      - <<: *compile_task
        input_mapping: { git: repo-bumped }

      - *smpoke_test_task

      - task: generate-messages
        image: image
        config:
          platform: linux
          inputs:  [ name: golang-info ]
          outputs: [ name: messages ]
          run:
            path: bash
            args:
            - -c
            - |
              set -ueo pipefail
              go_prev_ver=$(< golang-info/previous-version)
              go_curr_ver=$(< golang-info/version)

              version_details="${go_curr_ver}"
              if [[ ${go_curr_ver} != ${go_prev_ver} ]]; then
                  version_details="from ${go_prev_ver} to ${go_curr_ver} and its"
              fi
              echo "Update Golang ${version_details} dependencies" \
                  > messages/commit-message

              echo "${PIPELINE_NAME}: successfully bumped Golang ${version_details} dependencies," \
                "with passing tests! :tada:" \
                "<${PIPELINE_URL}|Ship it when ready!> ${SUCCESS_MOJI}" \
                > messages/notif-body
          params:
            SUCCESS_MOJI:  (( grab meta.slack.success_moji ))
            PIPELINE_URL:  (( grab meta.slack.pipeline_url ))
            PIPELINE_NAME: (( grab meta.pipeline ))

      - task: git-commit
        image: image
        file: gk-automation/tasks/git/commit.yml
        input_mapping:
          repo:        repo-bumped
          commit-info: messages
        params:
          GIT_COMMIT_NAME:    (( grab meta.git.name ))
          GIT_COMMIT_EMAIL:   (( grab meta.git.email ))
          GIT_DIFF_OPTS:      --color-words

      - put: git
        params:
          repository: repo-committed
          rebase:     true

    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text_file: messages/notif-body

resources:

  - name: image
    source:
      tag:               (( prune ))
      semver_constraint: "< 1970" # Avoid YYYYMMDD tags like '20231219'

  - name: version
    source:
      bucket:            (( prune ))
      region_name:       (( prune ))
      key:               (( prune ))
      access_key_id:     (( prune ))
      secret_access_key: (( prune ))
      driver:      git
      uri:         git@github.com:gstackio/gk-pipelines-compass.git
      branch:      master
      file:        (( concat "versions/" meta.pipeline ))
      private_key: ((github-private-key))
      git_user:    "((git-commit-name)) <((git-commit-email))>"

  - name: golang-alpine
    type: registry-image
    icon: docker
    check_every: 24h
    source:
      repository: golang
      variant:    alpine

  - name: git
    webhook_token: ((concourse-webhook-token))
    check_every: 24h

  - name: git-pull-requests
    webhook_token: ((concourse-webhook-token))
    # check_every: 1m # we leave the default here

  - name: weekly
    type: time
    icon: alarm
    source:
      location: Europe/Paris
      start:    "3:00"
      stop:     "4:30"
      days:     [ Saturday ]

  - name: gk-automation
    type: git
    icon: github
    check_every: 24h
    source:
      uri:         git@github.com:gstackio/gk-automation.git
      branch:      master
      private_key: (( grab meta.github.private_key ))

  - name: github-webhook
    type: github-webhook-resource
    source:
      github_api:   https://api.github.com
      github_token: (( grab meta.github.access_token ))

  - name: concourse-webhook-token
    type: credhub-secret
    source:
      server: https://credhub.ci.gstack.io
      username: (( grab meta.credhub.client ))
      password: ((credhub-client-secret))
      path: (( concat "/concourse/" meta.team "/concourse-webhook-token" ))

resource_types:

  - name: credhub-secret
    type: docker-image
    source:
      repository: cfcommunity/credhub-resource

  - name: github-webhook-resource
    type: docker-image
    source:
      repository: homedepottech/github-webhook-resource
